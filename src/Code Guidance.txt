################# 第一部分：Use Case(use_case和interface_adapter ##########################
写use case 和 interface adapter的时候，
要在use_case里面创建类：XXInputData，XXOutputData, XXInteractor;
在use_case里面创建接口：XXInputBoundary(这个接口被Interactor实现), XXOutputBoundary(这个接口被Presenter实现)， XXUserDataAccessInterface(这个接口被DataAccessObject实现);
在interface adapter里面创建类：XXController, XXPresenter, XXViewModel， XXState(仿照week5)；



然后，数据流向是这样的：从controller里面的方法传入inputData，然后调用Interactor的方法，Interactor的方法调用DataAccessObject的方法，
DataAccessObject的方法返回outputData，然后Interactor的方法返回outputData，然后调用Presenter的方法，Presenter的方法返回ViewModel，
然后调用Controller的方法，Controller的方法返回State，然后调用View的方法，View的方法更新UI。


一开始，我们会在View里面使用Controller作为attribute，然后在View里面使用controller的execute方法。（具体参照week5的例子）

“
public SignupView(SignupController controller, SignupViewModel signupViewModel,ClearController clearController, ClearViewModel clearViewModel) {

        this.signupController = controller;<——————————————————————————可以看出，这里的controller是从外面传进来的
        this.signupViewModel = signupViewModel;
        this.clearController = clearController;
        this.clearViewModel = clearViewModel;
        ..............................................省略了一些代码
        signUp.addActionListener(
                 // This creates an anonymous subclass of ActionListener and instantiates it.
                 new ActionListener() {
                     public void actionPerformed(ActionEvent evt) {
                         if (evt.getSource().equals(signUp)) {
                             SignupState currentState = signupViewModel.getState();

                             signupController.execute(<——————————————————————————也就是这里使用了Controller的execute方法
                                     currentState.getUsername(),
                                     currentState.getPassword(),
                                     currentState.getRepeatPassword()
                             );
                         }
                     }
                 }
         );
“
所以按照这个思路，我们先得写Controller的类，在其中写execute方法。（但是，我们发现，Controller的execute方法需要Interactor的方法，）
先考虑Controller，Controller的初始化方法“public Controller(XXInputBoundary interactor)"，
里面填充 this.XXInteractor = interactor; 这一句。(具体参照week5的例子)
为什么InputBoundary类后面的变量是interactor呢？因为Interactor实现了InputBoundary接口，所以可以用Interactor来初始化InputBoundary类的变量。

然后，在Controller里面创建方法：execute,week5里面的例子是这样的：
“
 public void execute(String username, String password1, String password2) {
        SignupInputData signupInputData = new SignupInputData(
                username, password1, password2);

        userSignupUseCaseInteractor.execute(signupInputData);
    }
”


接下来，考虑controller的execute方法需要Interactor的方法，所以我们要根据controller的execute方法，写Interactor的类，在Interactor的类里面写execute方法。
而根据上文，我们可知，Interactor的类需要实现InputBoundary接口，所以我们要在Interactor的类里面写InputBoundary接口的方法。（注意，InputBoundary接口的方法和Interactor的类的方法保持一致）
在InputBoundary接口里面写好要用的方法后，就是在Interactor的类里面填充这些方法了。主要是execute方法。
不过首先，要写一个初始化方法，这个初始化方法是“public Interactor(XXUserDataAccessInterface dataAccessObject)”，week5里面的例子是这样的：
“
    public SignupInteractor(SignupUserDataAccessInterface signupDataAccessInterface,
                            SignupOutputBoundary signupOutputBoundary,
                            UserFactory userFactory) {
        this.userDataAccessObject = signupDataAccessInterface;
        this.userPresenter = signupOutputBoundary;<——————————————这里signupOutputBoundary是从哪来的呢？不是从Controller里面传入的，因为Controller里面的参数是Interactor，而不是OutputBoundary。所以说明Interactor不是在Controller里面建的，而是在更外面建的。）
        this.userFactory = userFactory;
    }
”
我们需要传入一个UserDataAccessInterface的类，一个OutputBoundary的类，一个UserFactory的类。
注意，我们需要一个UserDataAccessInterface的类，这个类是用来和数据库交互的，所以到时候我们要根据Interactor的初始化方法，写UserDataAccessInterface的类。
接着，我们要写Interactor的execute方法，这个方法是“public void execute(XXInputData inputData)”，week5里面的例子是这样的：
“
    @Override
    public void execute(SignupInputData signupInputData) {
        if (userDataAccessObject.existsByName(signupInputData.getUsername())) {<——————————————这里用到了UserDataAccessInterface的方法,判断用户名是否存在
            userPresenter.prepareFailView("User already exists.");<——————————————这里用到了Presenter的方法，用来展现失败的界面
        } else if (!signupInputData.getPassword().equals(signupInputData.getRepeatPassword())) {
            userPresenter.prepareFailView("Passwords don't match.");<——————————————这里用到了Presenter的方法，用来展现失败的界面
        } else {

            LocalDateTime now = LocalDateTime.now();
            User user = userFactory.create(signupInputData.getUsername(), signupInputData.getPassword(), now);<———————————这里用到了UserFactory的方法(不一定要用到，看需求)
            userDataAccessObject.save(user);<——————————————————————————————这里用到了UserDataAccessInterface的方法，通过这个方法，我们可以和数据库交互(这是最重要的)

            SignupOutputData signupOutputData = new SignupOutputData(user.getName(), now.toString(), false);<——————————————这里用到了OutputData的方法，用来生成outputData，进而传递给Presenter(话说，除了DataAccessObject，只有InputData和OutputData是被new的，其他的都是被传进来的)
            userPresenter.prepareSuccessView(signupOutputData);<——————————————这里用到了Presenter的方法，用来展现成功的界面,这里会传递一个outputData，接下来会用到。
        }
    }
”

对了，controller还使用了Inputdata，所以我们要根据controller的execute方法，写Inputdata的类。week5里面的例子是这样的：
"
public class SignupInputData {

    final private String username;
    final private String password;
    final private String repeatPassword;

    public SignupInputData(String username, String password, String repeatPassword) {
        this.username = username;
        this.password = password;
        this.repeatPassword = repeatPassword;
    }

    String getUsername() {
        return username;
    }

    String getPassword() {
        return password;
    }

    public String getRepeatPassword() {
        return repeatPassword;
    }
}
"
通过这些代码，可以看出，Inputdata的类的最主要功能是：存储数据（在初始化数据里面）(这和controller的execute方法的功能是一致的：SignupInputData signupInputData = new SignupInputData(username, password1, password2);)，
然后提供数据（在get方法里面）。

回到Interactor的execute方法，我们可以看到，Interactor的execute方法需要UserDataAccessInterface的方法，所以我们要根据Interactor的初始化方法，写UserDataAccessInterface的类。
而考虑到UserDataAccessInterface的类是用来和数据库交互的，而且是一个接口，所以，要在FileUserDataAccessObject里面实现UserDataAccessInterface的方法。（DataAccessObject实现了UserDataAccessInterface接口）
week5里面的例子是这样的：
首先是DataAccessInterface：
“
public interface SignupUserDataAccessInterface {
    boolean existsByName(String identifier);<——————————————————————————————————————这是用来判断用户名是否存在的方法

    void save(User user);<——————————————————————————————————————这是用来保存User(普遍的讲：要保存的数据）的方法
}
”
那么，我们要在FileUserDataAccessObject里面实现这两个方法：
“
public class FileUserDataAccessObject implements SignupUserDataAccessInterface, LoginUserDataAccessInterface,ClearUserDataAccessInterface{
    private final File csvFile;
    private final Map<String, Integer> headers = new LinkedHashMap<>();
    private final Map<String, User> accounts = new HashMap<>();
    private UserFactory userFactory;
    public FileUserDataAccessObject(String csvPath, UserFactory userFactory) throws IOException {
        this.userFactory = userFactory;
        csvFile = new File(csvPath);
        headers.put("username", 0);
        headers.put("password", 1);
        headers.put("creation_time", 2);
        if (csvFile.length() == 0) {
            save();
        } else {
            try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {
                String header = reader.readLine();
                // For later: clean this up by creating a new Exception subclass and handling it in the UI.
                assert header.equals("username,password,creation_time");
                String row;
                while ((row = reader.readLine()) != null) {
                    String[] col = row.split(",");
                    String username = String.valueOf(col[headers.get("username")]);
                    String password = String.valueOf(col[headers.get("password")]);
                    String creationTimeText = String.valueOf(col[headers.get("creation_time")]);
                    LocalDateTime ldt = LocalDateTime.parse(creationTimeText);
                    User user = userFactory.create(username, password, ldt);
                    accounts.put(username, user);
                }
            }
        }
    }<——————————————————————————————————————这是初始化方法,来保存数据的
    @Override
    public void save(User user) {<——————————————————————————————————————这是用来保存数据的方法,对应SignupUserDataAccessInterface接口的方法
        accounts.put(user.getName(), user);
        this.save();
    }
    @Override
    public User get(String username) {
        return accounts.get(username);
    }
    private void save() {<——————————————————————————————————————这是save(User user)方法里面调用的方法,你说为什么名字一样？Java是支持方法重载的，只要参数不一样就行，就会识别为不同的方法。
        BufferedWriter writer;
        try {
            writer = new BufferedWriter(new FileWriter(csvFile));
            writer.write(String.join(",", headers.keySet()));
            writer.newLine();

            for (User user : accounts.values()) {
                String line = String.format("%s,%s,%s",
                        user.getName(), user.getPassword(), user.getCreationTime());
                writer.write(line);
                writer.newLine();
            }

            writer.close();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    @Override
    public String clearUsers() {<——————————————————————————————————————这是用来清除所有用户的方法,对应ClearUserDataAccessInterface接口的方法
        String deletedUserNames = "";
        for (String username : accounts.keySet()) {
            deletedUserNames += username + " ";
        }
        accounts.clear(); // clear the map

        // clear the file and return the deleted usernames
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(csvFile))) {
            writer.write(String.join(",", headers.keySet()));
            writer.newLine();
        } catch (IOException e) {
            throw new RuntimeException("Can't clear the file."+ e.getMessage());
        }
        return deletedUserNames;
    }
    /**
     * Return whether a user exists with username identifier.
     * @param identifier the username to check.
     * @return whether a user exists with username identifier
     */
    @Override
    public boolean existsByName(String identifier) {<——————————————————————————————————————这是用来判断用户名是否存在的方法,对应SignupUserDataAccessInterface接口的方法
        return accounts.containsKey(identifier);
    }
}
”
所以说，前面的controller，Interactor，Inputdata，UserDataAccessInterface什么的都是结构性的，最主要的业务逻辑是在DataAccessObject里面的。
此外对于一些可以有不同的实现的方法，比如week5里还有一个InMemoryUserDataAccessObject，这个类也实现了UserDataAccessInterface接口，但是和FileUserDataAccessObject的实现不一样。


那么，接下来，根据Interactor的execute方法，以及DataAccessInterface的方法，我们会需要Presenter来展现界面，所以我们要根据Interactor写Presenter的类。
在Interactor的execute方法里面，使用了如下方法：
“
userPresenter.prepareFailView("User already exists.");<——————————————这里用到了Presenter的方法，用来展现失败的界面
userPresenter.prepareFailView("Passwords don't match.");<——————————————这里用到了Presenter的方法，用来展现失败的界面
userPresenter.prepareSuccessView(signupOutputData);<——————————————这里用到了Presenter的方法，用来展现成功的界面,这里会传递一个outputData，接下来会用到。
”
我们可以看到，Presenter的方法有prepareFailView和prepareSuccessView，所以我们要在Presenter里面写这两个方法。而Presenter是对应OutputBoundary的实现，所以这两者的方法要保持一致。
以下是week5里面的例子：
“
public interface SignupOutputBoundary {
    void prepareSuccessView(SignupOutputData user);

    void prepareFailView(String error);
}
”
“
   private final SignupViewModel signupViewModel;
    private final LoginViewModel loginViewModel;
    private ViewManagerModel viewManagerModel;

    public SignupPresenter(ViewManagerModel viewManagerModel,
                           SignupViewModel signupViewModel,
                           LoginViewModel loginViewModel) {
        this.viewManagerModel = viewManagerModel;
        this.signupViewModel = signupViewModel;
        this.loginViewModel = loginViewModel;
    }

    @Override
    public void prepareSuccessView(SignupOutputData response) {<——————————————————————————————————————这是用来展现成功的界面的方法,接收一个outputData
        // On success, switch to the login view.
        LocalDateTime responseTime = LocalDateTime.parse(response.getCreationTime());
        response.setCreationTime(responseTime.format(DateTimeFormatter.ofPattern("hh:mm:ss")));

        LoginState loginState = loginViewModel.getState();
        loginState.setUsername(response.getUsername());
        this.loginViewModel.setState(loginState);
        loginViewModel.firePropertyChanged();

        viewManagerModel.setActiveView(loginViewModel.getViewName());
        viewManagerModel.firePropertyChanged();
    }

    @Override
    public void prepareFailView(String error) {<——————————————————————————————————————这是用来展现失败的界面的方法
        SignupState signupState = signupViewModel.getState();<——————————————————————————————————————这里用到了ViewModel的方法，用来更新State
        signupState.setUsernameError(error);<——————————————————————————————————————这里用到了State的方法，用来更新State
        signupViewModel.firePropertyChanged();<——————————————————————————————————————这里用到了ViewModel的方法，用来更新ViewModel
    }
}
”
可以看出，Presenter的方法主要是用来更新ViewModel的，以及更新State的。


在继续之前，还要解决OutputData的问题，因为Presenter的方法需要OutputData，所以我们要根据Presenter的方法，写OutputData的类。
week5里面的例子是这样的：
“
public class    SignupOutputData {
    private final String username;
    private String creationTime;
    private boolean useCaseFailed;

    public SignupOutputData(String username, String creationTime, boolean useCaseFailed) {
        this.username = username;
        this.creationTime = creationTime;
        this.useCaseFailed = useCaseFailed;
    }
    public String getUsername() {
        return username;
    }
    public String getCreationTime() {
        return creationTime;
    }
    public void setCreationTime(String creationTime) {
        this.creationTime = creationTime;
    }
}
”
而Interactor的execute方法里面，使用了有关OutputData的方法的语句如下：
a.“SignupOutputData signupOutputData = new SignupOutputData(user.getName(), now.toString(), false);”
b.“String deletedUserNames = userDataAccessObject.clearUsers();
        ClearOutputData clearOutputData = new ClearOutputData(deletedUserNames);”
可以看出，OutputData的类的最主要功能是：存储数据（从Interactor的execute方法里面获得的数据，可以是1.新建实体的数据（如SignupInteractor（语句a)),或是2.从数据库里读取的数据(如ClearupInteractor(语句b))）(这和controller的execute方法的功能是类似的：SignupInputData signupInputData = new SignupInputData(username, password1, password2);)，
以及提供数据（在get方法里面）。



话说，除了DataAccessObject，只有InputData和OutputData是被new的，其他的都是被传进来的


那么，InputData，InputBoundary，Interactor，OutputBoundary，OutputData，DataAccessObject，就都写完了。

然后，还要写的是ViewModel，与State。它们与Presenter的方法有关，也和View的方法有关。
与Presenter的方法有关的语句，以week5里面的例子为例：
“
SignupState signupState = signupViewModel.getState();<——————————————————————————————————————这里用到了ViewModel的方法，用来更新State
        signupState.setUsernameError(error);
        signupViewModel.firePropertyChanged();<——————————————————————————————————————这里用到了ViewModel的方法，用来更新ViewModel
”
与View的方法有关的语句，以week5里面的例子为例：
“
        signUp.addActionListener(
                // This creates an anonymous subclass of ActionListener and instantiates it.
                new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        if (evt.getSource().equals(signUp)) {
                            SignupState currentState = signupViewModel.getState();<——————————————————————————————————————这里用到了ViewModel的方法，用来更新State

                            signupController.execute(
                                    currentState.getUsername(),
                                    currentState.getPassword(),
                                    currentState.getRepeatPassword()
                            );
                        }
                    }
                }
        );
”
在week5里面，ViewMode是一个父类，有几个对应不同usecase的子类，比如SignupViewModel，LoginViewModel，ClearViewModel。
在week5里面，还有一个ViewManagerModel，它没有子类，它是ViewManager的attribute，ViewManager是一个类，用来管理不同的View。
然后，state是没有父类的，总体而言，state是用来作为该usecase状态的一个容器，它封装了用户输入的信息，同时提供了一些方法来获取和修改这些信息。通过包含错误信息，它还可以用于捕获验证或注册过程中出现的错误。（总体而言，SignupState 类的作用是作为用户注册状态的一个容器。它封装了用户输入的信息，同时提供了一些方法来获取和修改这些信息。通过包含错误信息，它还可以用于捕获验证或注册过程中出现的错误）
week5里面的例子是这样的：
ViewMode：
“
public abstract class ViewModel {
    private String viewName;
    public ViewModel(String viewName) {
        this.viewName = viewName;
    }
    public String getViewName() {
        return this.viewName;
    }
    public abstract void firePropertyChanged();
    public abstract void addPropertyChangeListener(PropertyChangeListener listener);
}
”
其子类extends了父类的方法，比如SignupViewModel：
“
public class SignupViewModel extends ViewModel {

    public static final String CLEAR_BUTTON_LABEL = "Clear";<——————————————————————————————————————这几个字符串应该是到时候显示在View上的
    public static final String TITLE_LABEL = "Sign Up View";
    public static final String USERNAME_LABEL = "Choose username";
    public static final String PASSWORD_LABEL = "Choose password";
    public static final String REPEAT_PASSWORD_LABEL = "Enter password again";
    public static final String SIGNUP_BUTTON_LABEL = "Sign up";
    public static final String CANCEL_BUTTON_LABEL = "Cancel";

    private SignupState state = new SignupState();<——————————————————————————————————————这里与父类不同，它初始化了一个state，这个state是SignupState类的一个实例，来作为attribute

    public SignupViewModel() {
        super("sign up");<——————————————————————————————————————这里初始化只要传入一个字符串就行，这个字符串是View的名字
    }
    public void setState(SignupState state) {
        this.state = state;
    }
    private final PropertyChangeSupport support = new PropertyChangeSupport(this);
    // This is what the Signup Presenter will call to let the ViewModel know
    // to alert the View
    public void firePropertyChanged() {<——————————————————————————————————————这个方法被Presenter调用（signupViewModel.firePropertyChanged();）
        support.firePropertyChange("state", null, this.state);
    }
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        support.addPropertyChangeListener(listener);
    }
    public SignupState getState() {<——————————————————————————————————————这个方法被View调用（SignupState currentState = signupViewModel.getState();）
        return state;
    }
}
”
State：
"
package interface_adapter.signup;

public class SignupState {
    private String username = "";
    private String usernameError = null;
    private String password = "";
    private String passwordError = null;
    private String repeatPassword = "";
    private String repeatPasswordError = null;

    public SignupState(SignupState copy) {
        username = copy.username;
        usernameError = copy.usernameError;
        password = copy.password;
        passwordError = copy.passwordError;
        repeatPassword = copy.repeatPassword;
        repeatPasswordError = copy.repeatPasswordError;
    }

    // Because of the previous copy constructor, the default constructor must be explicit.
    public SignupState() {
    }

    public String getUsername() {
        return username;
    }

    public String getUsernameError() {
        return usernameError;
    }

    public String getPassword() {
        return password;
    }

    public String getPasswordError() {<——————————————————————————————————————这里捕获了错误
        return passwordError;
    }

    public String getRepeatPassword() {
        return repeatPassword;
    }

    public String getRepeatPasswordError() {<——————————————————————————————————————这里捕获了错误
        return repeatPasswordError;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setUsernameError(String usernameError) {
        this.usernameError = usernameError;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setPasswordError(String passwordError) {
        this.passwordError = passwordError;
    }

    public void setRepeatPassword(String repeatPassword) {
        this.repeatPassword = repeatPassword;
    }

    public void setRepeatPasswordError(String repeatPasswordError) {
        this.repeatPasswordError = repeatPasswordError;
    }

    @Override
    public String toString() {
        return "SignupState{" +
                "username='" + username + '\'' +
                ", password='" + password + '\'' +
                ", repeatPassword='" + repeatPassword + '\'' +
                '}';
    }
}
"
这里的State类，是用来作为该usecase状态的一个容器，它封装了用户输入的信息，同时提供了一些方法来获取和修改这些信息。通过包含错误信息，它还可以用于捕获验证或注册过程中出现的错误。
这些仿照week5的例子写就好了。


这样子interface adapter就写完了。虽然有些地方还不是很明白，但是总体而言，就是这样子的。这些不懂得地方，可能和Main函数有关，因为Main函数是用来启动整个程序的，所以可能会有一些特殊的地方。


总的来说，use case和interface adapter的写法是这样的：先写controller，然后写Interactor，然后写InputData，然后写UserDataAccessInterface，然后写Presenter，然后写OutputData，然后写ViewModel，然后写State。
这是最关键的顺序。按照这个顺序写，不懂得再问别人吧。



然后说View里面的actionListener，这个actionListener是用来监听用户的输入的，然后把用户的输入传递给Controller的execute方法，然后Controller的execute方法会调用Interactor的方法，然后Interactor的方法会调用DataAccessObject的方法，然后DataAccessObject的方法会返回OutputData，然后Interactor的方法会返回OutputData，然后Controller的方法会调用Presenter的方法，然后Presenter的方法会返回ViewModel，然后Controller的方法会返回State，然后View的方法会更新UI。
        clear.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (e.getSource().equals(clear)) {
                            ClearState clearState = clearViewModel.getState();

                            clearController.execute();
                            // Get the deleted usernames from clearViewModel
                            String deletedUserNames = clearState.getDeletedUserNames();// 原来执行完后的结果在State里面

                            // Show a dialog with the deleted usernames
                            // It shoulb be like:
                            // User1
                            // User2
                            JOptionPane.showMessageDialog(SignupView.this, deletedUserNames.replaceAll(" ", "\n"));
                        }
                    }
                }
        );
String deletedUserNames = clearState.getDeletedUserNames();这一句可以看出，执行完后的结果在State里面，然后再把这个结果传递给View的方法，然后View的方法更新UI。
这是一个很重要的思路，就是执行完后的结果在State里面，然后再把这个结果传递给View的方法，然后View的方法更新UI。
这是输出的使用

那么如何获得输入，除了点击。还

（注意，那个在View里被传进来的controller,里面已经有了interactor，而interactor里面已经有了presenter，一层一层已经打包好了才传进View的，它们从哪里来？）

################# 第二部分：Main ##########################

回到开头，我们需要考虑到，View中的Controller是一个需要被传入的参数，那这个参数是从哪来的呢？Main吗？

先不管这些，看看week5里面的Main函数：
“
package app;

import data_access.FileUserDataAccessObject;
import entity.CommonUserFactory;
import interface_adapter.clear_users.ClearViewModel;
import interface_adapter.login.LoginViewModel;
import interface_adapter.logged_in.LoggedInViewModel;
import interface_adapter.signup.SignupViewModel;
import interface_adapter.ViewManagerModel;
import interface_adapter.clear_users.ClearViewModel;
import use_case.clear_users.ClearUserDataAccessInterface;
import use_case.login.LoginUserDataAccessInterface;
import view.LoggedInView;
import view.LoginView;
import view.SignupView;
import view.ViewManager;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        // Build the main program window, the main panel containing the
        // various cards, and the layout, and stitch them together.

        // The main application window.
        JFrame application = new JFrame("Login Example");——————————————————————————｜
        application.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);———————｜———————————————这里是创建了一个主应用窗口，然后设置了关闭窗口的方式

        CardLayout cardLayout = new CardLayout();————————————————————————初始化用于视图的 CardLayout，CardLayout 是一种布局管理器，允许在同一个容器中显示多个组件，但一次只有一个组件可见。这种布局通常用于创建向导式界面或在不同视图之间切换。

        // The various View objects. Only one view is visible at a time.
        JPanel views = new JPanel(cardLayout);
        application.add(views); ————————————-创建用于视图的面板:此面板将容纳应用程序的各种视图。CardLayout 用于此面板，表示它将管理在不同视图之间的切换。

        // This keeps track of and manages which view is currently showing.
        ViewManagerModel viewManagerModel = new ViewManagerModel();
        new ViewManager(views, cardLayout, viewManagerModel);

        // The data for the views, such as username and password, are in the ViewModels.
        // This information will be changed by a presenter object that is reporting the
        // results from the use case. The ViewModels are observable, and will
        // be observed by the Views.
        LoginViewModel loginViewModel = new LoginViewModel();
        LoggedInViewModel loggedInViewModel = new LoggedInViewModel();
        SignupViewModel signupViewModel = new SignupViewModel();

        FileUserDataAccessObject userDataAccessObject;
        try {
            userDataAccessObject = new FileUserDataAccessObject("./users.csv", new CommonUserFactory());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        ClearViewModel clearViewModel = new ClearViewModel();
        ClearUserDataAccessInterface clearUserDataAccessObject = userDataAccessObject;
        SignupView signupView = SignupUseCaseFactory.create(viewManagerModel, loginViewModel, signupViewModel, userDataAccessObject, clearViewModel, clearUserDataAccessObject);
        views.add(signupView, signupView.viewName);

        LoginView loginView = LoginUseCaseFactory.create(viewManagerModel, loginViewModel, loggedInViewModel, userDataAccessObject);
        views.add(loginView, loginView.viewName);

        LoggedInView loggedInView = new LoggedInView(loggedInViewModel);
        views.add(loggedInView, loggedInView.viewName);

        viewManagerModel.setActiveView(signupView.viewName);
        viewManagerModel.firePropertyChanged();

        application.pack();
        application.setVisible(true);
    }
}
”


################# 第三部分：如何写view ##########################


################# 第四部分：如何写DataaccessObject ##########################



################# 第五部分：两个view是怎么转换view的 ##########################
拿signup和login来说，他们的view是不一样的。
而转换的方式可能是signup presenter 调用了setActiveView方法，然后传入了loginViewModel.getViewName()，这个方法是在viewManagerModel里面的。
“
viewManagerModel.setActiveView(loginViewModel.getViewName());<——————————————————————————————————————这里用到了ViewModel的方法，用来更新ViewModel,而且我知道为什么要viewname了。
”
那么getViewName()从哪来的呢？
“
package interface_adapter;

import java.beans.PropertyChangeListener;

public abstract class ViewModel {

    private String viewName;

    public ViewModel(String viewName) {
        this.viewName = viewName;
    }
    public String getViewName() {<——————————————————————这里来的（妈妈生的）
        return this.viewName;
    }

    public abstract void firePropertyChanged();
    public abstract void addPropertyChangeListener(PropertyChangeListener listener);


}
”
但这里实现的效果是：输入用户名，密码，重复密码，点击signup后，直接跳到了loginviewmodel对应的。
但我自己要实现的viewwarehouse，实际上没有两个viewmodel。（难道是运行viewManagerModel.setActiveView(viewRecipeModel.getViewName())?)


################# 第六部分：同一个View里如果我有两个模式怎么转换 ##########################
如果分模式，会更复杂，
直接分成两个view就可以了

比如说，阅读和编辑recipe看似是recipe的一体两面，但实际上可以通过写RecipeView和EdittingView来实现。